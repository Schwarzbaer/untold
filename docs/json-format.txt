Document Format
---------------

* The most minimal story:
      {'start_node': 'start',
       'story': [{'id': 'start',
                  'special': 'exit'}]}
* Some metadata:
      {'title': 'Example from the docs',
       'author': 'TheCheapestPixels'}
* Typical story node (current state):
      {'scene': {'text': 'This is the scene as it presents itself.'},
       'actable': [{'text': 'This is a possible action you can take.',
                    'result': {'set': {'var': 'foo',
                                       'val': 23},
                               'goto': 'target_node'}}],
       'autoact': {'set': {'var': 'foo',
                           'val': 23},
                   'goto': 'target_node'}}

Conditions
----------

Conditions are expressions that allow to write stories that are reactive to the current state of the story. They return a value. Usually, i.e. in a case/cond, it is relevant whether that value is equivalent to a boolean True or False.

* None, booleans, strings, ints and floats get returned verbatim.
* Constants in the story (will return that value):
      {'const': <foo>}
* References to variables (value will be None if variable isn't specified in the state, its value otherwise):
      {'var': 'foo'}
* Equality test between two sub-conditions
      {'op': '==',
       'varl': {<cond1>},
       'varr': {<cond2>}}
* Is foo absent in the state?
      {'op': '==',
       'varl': {'var': 'foo'},
       'varr': {'const': None}}
* (foo == True) == (bar == False)
      {'op': '==',
       'varl': {'op': '==',
                'varl': {'var': 'foo'},
                'varr': {'const': True}},
       'varr': {'op': '==',
                'varl': {'var': 'bar'},
                'varr': {'const': False}}}
* Other operators: !=, <, <=, >, >=
* TODO
  * String operators? ~=?
  * sum, abs, other expressions?
